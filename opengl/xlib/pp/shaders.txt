    const GLchar *fragmentShaderSourceCode =
        "#version 450 core"
        "\n"
        "in vec2 oTexCoord;"
        "in vec3 oWorldPosition;"
        "in vec3 out_normal;"

        "uniform sampler2D uSamplerNormal;"
        "uniform sampler2D uSamplerDiffuse;"
        "uniform vec3 lightPosition;"
        "uniform vec3 lightColor;"
        "uniform vec3 uCameraPosition;"

        "out vec4 FragColor;"
        "vec3 getNormalFromMap()"
        "{"
        "   vec3 tangentNormal = texture(uSamplerNormal, oTexCoord).xyz * 2.0f - 1.0f;"
        "   vec3 Q1 = dFdx(oWorldPosition);"
        "   vec3 Q2 = dFdy(oWorldPosition);"
        "   vec2 st1 = dFdx(oTexCoord);"
        "   vec2 st2 = dFdy(oTexCoord);"
        "   vec3 N = normalize(out_normal);"
        "   vec3 T = normalize(Q1 * st2.t - Q2 * st1.t);"
        "   vec3 B = -normalize(cross(N, T));"
        "   mat3 TBN = mat3(T, B, N);"
        "   return (normalize(TBN * tangentNormal));"
        "}"

        "void main(void)"
        "{"
        "   vec3 normal = getNormalFromMap();"
        "   vec3 diffuseColor = texture(uSamplerDiffuse, oTexCoord).xyz;"
        "   vec3 lightDirection = normalize(lightPosition - oWorldPosition);"
        "   float NdotL = max(dot(normal, lightDirection), 0.0f);"
        "   vec3 color =  (lightColor) * NdotL ;"
        "   vec3 finalColor = vec3(0.5, 0.5, 0.5) * NdotL;"
        "   FragColor = vec4(normal, 1.0f);"
        "}";
		
		
		
		        "#version 450 core"
        "\n"
        "in vec3 aPosition;"
        "in vec3 aNormal;"
        "in vec2 aTexCoords;"

        "uniform mat4 uModelMatrix;"
        "uniform mat4 viewMatrix;"
        "uniform mat4 projectionMatrix;"

        "out vec2 oTexCoord;"
        "out vec3 oWorldPosition;"
        "out vec3 out_normal;"

        "void main(void)"
        "{"
        "   oTexCoord = aTexCoords;"
        "   oWorldPosition = vec3(uModelMatrix * vec4(aPosition, 1.0f));"
        "   out_normal = mat3(uModelMatrix) * aNormal;"

        "   gl_Position = projectionMatrix * viewMatrix * vec4(oWorldPosition, 1.0f);"
        "}";